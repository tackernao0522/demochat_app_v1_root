version: 2.1

executors:
  docker-executor:
    docker:
      - image: cimg/ruby:3.3.2
      - image: cimg/postgres:15.7
    working_directory: ~/project

jobs:
  build:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Initialize and update submodules
          command: |
            git submodule sync --recursive
            git submodule update --init --recursive
      - setup_remote_docker
      - run:
          name: Clean up environment
          command: |
            echo "Cleaning up unused Docker networks..."
            docker network prune -f
      - run:
          name: Stop and remove containers
          command: |
            echo "Stopping and removing Docker containers..."
            docker-compose -f docker-compose.dev.yml down -v
      - run:
          name: Start services
          command: |
            echo "Starting Docker services..."
            docker-compose -f docker-compose.dev.yml up -d
            docker-compose -f docker-compose.dev.yml ps
      - run:
          name: Set database host for Rails API (CircleCI)
          command: |
            sed -i 's/host: db/host: localhost/' ~/project/api/config/database.yml
            cat ~/project/api/config/database.yml
      - run:
          name: Wait for PostgreSQL to be ready
          command: |
            docker-compose -f docker-compose.dev.yml exec -T db bash -c "until pg_isready -h localhost -U postgres; do sleep 1; done"
      - run:
          name: Install dependencies
          command: |
            cd ~/project/api
            gem install bundler
            bundle install
      - run:
          name: Set up database
          command: |
            cd ~/project/api
            bundle exec rails db:drop || true
            bundle exec rails db:create
            bundle exec rails db:schema:load  # スキーマをロードするコマンドを追加
            bundle exec rails db:migrate
      - run:
          name: Run RSpec tests
          command: |
            cd ~/project/api
            bundle exec rspec

  deploy:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Initialize and update submodules
          command: |
            git submodule sync --recursive
            git submodule update --init --recursive
      - run:
          name: Check for API changes
          command: |
            echo "Checking for changes in API..."
            git diff HEAD^ HEAD api || true
            if git diff --quiet HEAD^ HEAD api; then
              echo "No changes in API code, skipping deploy"
              echo "export SKIP_API_DEPLOY=true" >> $BASH_ENV
            else
              echo "API code changed, will deploy"
              echo "export SKIP_API_DEPLOY=false" >> $BASH_ENV
            fi
      - run:
          name: Show BASH_ENV
          command: |
            cat $BASH_ENV
      - run:
          name: Install Flyctl
          command: |
            curl -L https://fly.io/install.sh | sh
            export FLYCTL_INSTALL="/home/circleci/.fly"
            export PATH="$FLYCTL_INSTALL/bin:$PATH"
            echo 'export FLYCTL_INSTALL="/home/circleci/.fly"' >> $BASH_ENV
            echo 'export PATH="$FLYCTL_INSTALL/bin:$PATH"' >> $BASH_ENV
      - run:
          name: Verify Flyctl Installation
          command: |
            source $BASH_ENV
            export PATH="$FLYCTL_INSTALL/bin:$PATH"
            which flyctl
            flyctl version
      - run:
          name: Deploy to Fly.io
          command: |
            source $BASH_ENV
            export PATH="$FLYCTL_INSTALL/bin:$PATH"
            echo "SKIP_API_DEPLOY is $SKIP_API_DEPLOY"
            if [ "$SKIP_API_DEPLOY" != "true" ]; then
              export FLY_API_TOKEN=${FLY_API_TOKEN}
              cd ~/project
              ls -la
              flyctl deploy --config ./fly.toml -a demochat-api
            else
              echo "Skipping API deploy"
            fi

  deploy_frontend:
    docker:
      - image: cimg/node:current
    steps:
      - checkout
      - run:
          name: Initialize and update submodules
          command: |
            git submodule sync --recursive
            git submodule update --init --recursive
      - run:
          name: Check for frontend changes
          command: |
            echo "Checking for changes in frontend..."
            git diff HEAD^ HEAD front || true
            if git diff --quiet HEAD^ HEAD front; then
              echo "No changes in frontend code, skipping deploy"
              echo "export SKIP_FRONTEND_DEPLOY=true" >> $BASH_ENV
            else
              echo "Frontend code changed, will deploy"
              echo "export SKIP_FRONTEND_DEPLOY=false" >> $BASH_ENV
            fi
      - run:
          name: Show BASH_ENV
          command: |
            cat $BASH_ENV
      - run:
          name: Install Vercel CLI
          command: |
            sudo yarn global add vercel
      - run:
          name: Deploy to Vercel
          command: |
            source $BASH_ENV
            echo "SKIP_FRONTEND_DEPLOY is $SKIP_FRONTEND_DEPLOY"
            if [ "$SKIP_FRONTEND_DEPLOY" != "true" ]; then
              vercel --token $VERCEL_TOKEN --prod --yes --cwd ./front
            else
              echo "Skipping frontend deploy"
            fi

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - deploy:
          requires:
            - build
      - deploy_frontend:
          requires:
            - build
